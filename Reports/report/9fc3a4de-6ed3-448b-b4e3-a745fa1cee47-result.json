{"name": "test_corporate", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=124.0.6367.118)\nStacktrace:\n#0 0x646fa7b03cb3 <unknown>\n#1 0x646fa77f22f7 <unknown>\n#2 0x646fa783740f <unknown>\n#3 0x646fa7835846 <unknown>\n#4 0x646fa785f412 <unknown>\n#5 0x646fa7831b58 <unknown>\n#6 0x646fa785f5de <unknown>\n#7 0x646fa787dbe9 <unknown>\n#8 0x646fa785f1b3 <unknown>\n#9 0x646fa783024a <unknown>\n#10 0x646fa7830c1e <unknown>\n#11 0x646fa7ac7fdb <unknown>\n#12 0x646fa7acbf2b <unknown>\n#13 0x646fa7ab40f1 <unknown>\n#14 0x646fa7acca92 <unknown>\n#15 0x646fa7a98faf <unknown>\n#16 0x646fa7af2e08 <unknown>\n#17 0x646fa7af2fe0 <unknown>\n#18 0x646fa7b02e04 <unknown>\n#19 0x7d291ac94ac3 <unknown>", "trace": "self = <testcases.test_corporate.Test_corporate object at 0x7e6683a60610>\nlogin_setup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"5d4ef2e2c7a8e16b20cdb5a255e247b6\")>\n\n    def test_corporate(self, login_setup):\n        self.driver = login_setup\n        self.driver.get(self.baseURL)\n        self.cp = corporatePage(self.driver)\n        self.random_d = randomData()\n        self.gst_no = self.random_d.generate_random_string()\n        self.pan_nu = self.random_d.generate_random_Pan()\n        # self.phone = self.random_d.genrate_random_phone()\n        self.email = self.random_d.random_email()\n    \n    \n        # self.rows = XLUtils.getRowCount(self.path, 'sheet1')\n        #\n        # for r in range(2, self.rows + 1):\n        #     self.company = XLUtils.readData(self.path, 'sheet1', r, 1)\n        #     self.buisness = XLUtils.readData(self.path, 'sheet1', r, 2)\n        #     self.logo = XLUtils.readData(self.path, 'sheet1', r, 3)\n        #     self.sec_Num = XLUtils.readData(self.path, 'sheet1', r, 4)\n        #     self.sec_amt = XLUtils.readData(self.path, 'sheet1', r, 5)\n        #     self.address = XLUtils.readData(self.path, 'sheet1', r, 6)\n        #     self.address1 = XLUtils.readData(self.path, 'sheet1', r, 7)\n        #     self.city = XLUtils.readData(self.path, 'sheet1', r, 8)\n        #     self.state = XLUtils.readData(self.path, 'sheet1', r, 9)\n        #     self.pin = XLUtils.readData(self.path, 'sheet1', r, 10)\n        #     self.adminname = XLUtils.readData(self.path, 'sheet1', r, 11)\n        #\n        #\n    \n        self.cp.corporate_button()\n        self.cp.onboard_button()\n        self.cp.company_name(self.company)\n        self.cp.buisness_Type(self.buisness)\n        self.cp.company_logo(self.logo)\n        self.cp.gst_num(self.gst_no)\n        self.cp.pan_num(self.pan_nu)\n        self.cp.dropDown()\n>       self.cp.security_num(self.sec_num)\n\ntestcases/test_corporate.py:71: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npageobjects/corporate.py:102: in security_num\n    number.send_keys(securitynumber)\n.venv/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:231: in send_keys\n    self._execute(\n.venv/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n.venv/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7e6683a609a0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...\\\\n#17 0x646fa7af2fe0 \\\\u003Cunknown>\\\\n#18 0x646fa7b02e04 \\\\u003Cunknown>\\\\n#19 0x7d291ac94ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=124.0.6367.118)\nE       Stacktrace:\nE       #0 0x646fa7b03cb3 <unknown>\nE       #1 0x646fa77f22f7 <unknown>\nE       #2 0x646fa783740f <unknown>\nE       #3 0x646fa7835846 <unknown>\nE       #4 0x646fa785f412 <unknown>\nE       #5 0x646fa7831b58 <unknown>\nE       #6 0x646fa785f5de <unknown>\nE       #7 0x646fa787dbe9 <unknown>\nE       #8 0x646fa785f1b3 <unknown>\nE       #9 0x646fa783024a <unknown>\nE       #10 0x646fa7830c1e <unknown>\nE       #11 0x646fa7ac7fdb <unknown>\nE       #12 0x646fa7acbf2b <unknown>\nE       #13 0x646fa7ab40f1 <unknown>\nE       #14 0x646fa7acca92 <unknown>\nE       #15 0x646fa7a98faf <unknown>\nE       #16 0x646fa7af2e08 <unknown>\nE       #17 0x646fa7af2fe0 <unknown>\nE       #18 0x646fa7b02e04 <unknown>\nE       #19 0x7d291ac94ac3 <unknown>\n\n.venv/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementNotInteractableException"}, "start": 1714971643142, "stop": 1714971657185, "uuid": "232696d2-7631-4606-9b2c-08239ccdd39e", "historyId": "e5675735761af8058bfb6b44a130df1d", "testCaseId": "e5675735761af8058bfb6b44a130df1d", "fullName": "testcases.test_corporate.Test_corporate#test_corporate", "labels": [{"name": "severity", "value": "normal"}, {"name": "parentSuite", "value": "testcases"}, {"name": "suite", "value": "test_corporate"}, {"name": "subSuite", "value": "Test_corporate"}, {"name": "host", "value": "vishal-IdeaPad-Gaming-3-15IMH05"}, {"name": "thread", "value": "17278-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.test_corporate"}]}