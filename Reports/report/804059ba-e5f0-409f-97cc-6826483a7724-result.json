{"name": "test_bulk", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button type=\"button\" class=\"sc-uVWWZ KeIfD btn btn-primary\">...</button> is not clickable at point (1284, 238). Other element would receive the click: <button type=\"button\" class=\"btn-close\" aria-label=\"Close\"></button>\n  (Session info: chrome=124.0.6367.118)\nStacktrace:\n#0 0x5e4be054dcb3 <unknown>\n#1 0x5e4be023c4a7 <unknown>\n#2 0x5e4be028df73 <unknown>\n#3 0x5e4be028be76 <unknown>\n#4 0x5e4be0289847 <unknown>\n#5 0x5e4be0288c14 <unknown>\n#6 0x5e4be027c1c9 <unknown>\n#7 0x5e4be02a9412 <unknown>\n#8 0x5e4be027bb58 <unknown>\n#9 0x5e4be02a95de <unknown>\n#10 0x5e4be02c7be9 <unknown>\n#11 0x5e4be02a91b3 <unknown>\n#12 0x5e4be027a24a <unknown>\n#13 0x5e4be027ac1e <unknown>\n#14 0x5e4be0511fdb <unknown>\n#15 0x5e4be0515f2b <unknown>\n#16 0x5e4be04fe0f1 <unknown>\n#17 0x5e4be0516a92 <unknown>\n#18 0x5e4be04e2faf <unknown>\n#19 0x5e4be053ce08 <unknown>\n#20 0x5e4be053cfe0 <unknown>\n#21 0x5e4be054ce04 <unknown>\n#22 0x7770d0a94ac3 <unknown>", "trace": "self = <testcases.test_bulkupload.TestBulkUpload object at 0x7f81792a6020>, login_setup1 = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"6d8468e9294a326e8a8c7feb85faeb66\")>\n\n    @pytest.mark.usefixtures(\"login_setup1\")\n    def test_bulk(self, login_setup1):\n        file = \"/home/vishal/Downloads/Corporate_Limits_updated3.csv\"\n        file1 = \"/home/vishal/Downloads/Corporate_Limits_1 (8).csv\"\n        self.driver = login_setup1\n        #self.driver.get(self.baseURL)\n        self.bu = bulk_upload(self.driver)\n        self.bu.bulk_btn()\n        self.bu.file_download()\n        self.bu.upload_btn()\n        self.bu.send_key(file)\n        self.bu.upload_()\n        self.bu.customers()\n>       self.bu.customers_file(file1)\n\ntestcases/test_bulkupload.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageobjects/bulkupload.py:69: in customers_file\n    element.click()\n.venv/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n.venv/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n.venv/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f81792a6f50>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x5e4be053cfe0 \\\\u003Cunknown>\\\\n#21 0x5e4be054ce04 \\\\u003Cunknown>\\\\n#22 0x7770d0a94ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button type=\"button\" class=\"sc-uVWWZ KeIfD btn btn-primary\">...</button> is not clickable at point (1284, 238). Other element would receive the click: <button type=\"button\" class=\"btn-close\" aria-label=\"Close\"></button>\nE         (Session info: chrome=124.0.6367.118)\nE       Stacktrace:\nE       #0 0x5e4be054dcb3 <unknown>\nE       #1 0x5e4be023c4a7 <unknown>\nE       #2 0x5e4be028df73 <unknown>\nE       #3 0x5e4be028be76 <unknown>\nE       #4 0x5e4be0289847 <unknown>\nE       #5 0x5e4be0288c14 <unknown>\nE       #6 0x5e4be027c1c9 <unknown>\nE       #7 0x5e4be02a9412 <unknown>\nE       #8 0x5e4be027bb58 <unknown>\nE       #9 0x5e4be02a95de <unknown>\nE       #10 0x5e4be02c7be9 <unknown>\nE       #11 0x5e4be02a91b3 <unknown>\nE       #12 0x5e4be027a24a <unknown>\nE       #13 0x5e4be027ac1e <unknown>\nE       #14 0x5e4be0511fdb <unknown>\nE       #15 0x5e4be0515f2b <unknown>\nE       #16 0x5e4be04fe0f1 <unknown>\nE       #17 0x5e4be0516a92 <unknown>\nE       #18 0x5e4be04e2faf <unknown>\nE       #19 0x5e4be053ce08 <unknown>\nE       #20 0x5e4be053cfe0 <unknown>\nE       #21 0x5e4be054ce04 <unknown>\nE       #22 0x7770d0a94ac3 <unknown>\n\n.venv/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException"}, "start": 1715064561440, "stop": 1715064576603, "uuid": "b3560633-de45-429c-9a80-43d377b9d383", "historyId": "6e42cf6a3cc18df9de0d3831560e70df", "testCaseId": "6e42cf6a3cc18df9de0d3831560e70df", "fullName": "testcases.test_bulkupload.TestBulkUpload#test_bulk", "labels": [{"name": "severity", "value": "normal"}, {"name": "tag", "value": "@pytest.mark.usefixtures('login_setup1')"}, {"name": "parentSuite", "value": "testcases"}, {"name": "suite", "value": "test_bulkupload"}, {"name": "subSuite", "value": "TestBulkUpload"}, {"name": "host", "value": "vishal-IdeaPad-Gaming-3-15IMH05"}, {"name": "thread", "value": "13153-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.test_bulkupload"}]}