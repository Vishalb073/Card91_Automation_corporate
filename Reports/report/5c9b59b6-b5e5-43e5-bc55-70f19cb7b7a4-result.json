{"name": "test_reasons", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <div id=\"cell-9-undefined\" data-column-id=\"9\" role=\"cell\" class=\"sc-kAyceB sc-imWYAI sc-jXbUNg brslDD jkrUys XSzWv rdt_TableCell\" data-tag=\"allowRowEvents\">...</div> is not clickable at point (1632, 480). Other element would receive the click: <div role=\"dialog\" aria-modal=\"true\" class=\"fade modal show\" tabindex=\"-1\" aria-labelledby=\"contained-modal-title-vcenter\" style=\"display: block; padding-right: 3px;\">...</div>\n  (Session info: chrome=124.0.6367.118)\nStacktrace:\n#0 0x5e9aabbf2df3 <unknown>\n#1 0x5e9aab8e14e7 <unknown>\n#2 0x5e9aab932fb3 <unknown>\n#3 0x5e9aab930eb6 <unknown>\n#4 0x5e9aab92e887 <unknown>\n#5 0x5e9aab92dc54 <unknown>\n#6 0x5e9aab921209 <unknown>\n#7 0x5e9aab94e452 <unknown>\n#8 0x5e9aab920b98 <unknown>\n#9 0x5e9aab94e61e <unknown>\n#10 0x5e9aab96cc29 <unknown>\n#11 0x5e9aab94e1f3 <unknown>\n#12 0x5e9aab91f28a <unknown>\n#13 0x5e9aab91fc5e <unknown>\n#14 0x5e9aabbb711b <unknown>\n#15 0x5e9aabbbb06b <unknown>\n#16 0x5e9aabba3231 <unknown>\n#17 0x5e9aabbbbbd2 <unknown>\n#18 0x5e9aabb880ef <unknown>\n#19 0x5e9aabbe1f48 <unknown>\n#20 0x5e9aabbe2120 <unknown>\n#21 0x5e9aabbf1f44 <unknown>\n#22 0x79b175e94ac3 <unknown>", "trace": "self = <testcases.test_bulkupload.Test_Bulkupload object at 0x71c0473a9210>, login_setup1 = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"86808ccecbe2d55598b08f38367cfd6f\")>\n\n    def test_reasons(self, login_setup1):\n        file1 = \"/home/vishal/Downloads/Corporate Customers Bulk Upload.csv\"\n>       self.upload_file_and_check_reason(file1, self.e_msg, login_setup1)\n\ntestcases/test_bulkupload.py:65: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntestcases/test_bulkupload.py:40: in upload_file_and_check_reason\n    self.bu.download()\npageobjects/bulkupload.py:98: in download\n    webs.click()\n.venv/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n.venv/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n.venv/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x71c0473aa110>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x5e9aabbe2120 \\\\u003Cunknown>\\\\n#21 0x5e9aabbf1f44 \\\\u003Cunknown>\\\\n#22 0x79b175e94ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <div id=\"cell-9-undefined\" data-column-id=\"9\" role=\"cell\" class=\"sc-kAyceB sc-imWYAI sc-jXbUNg brslDD jkrUys XSzWv rdt_TableCell\" data-tag=\"allowRowEvents\">...</div> is not clickable at point (1632, 480). Other element would receive the click: <div role=\"dialog\" aria-modal=\"true\" class=\"fade modal show\" tabindex=\"-1\" aria-labelledby=\"contained-modal-title-vcenter\" style=\"display: block; padding-right: 3px;\">...</div>\nE         (Session info: chrome=124.0.6367.118)\nE       Stacktrace:\nE       #0 0x5e9aabbf2df3 <unknown>\nE       #1 0x5e9aab8e14e7 <unknown>\nE       #2 0x5e9aab932fb3 <unknown>\nE       #3 0x5e9aab930eb6 <unknown>\nE       #4 0x5e9aab92e887 <unknown>\nE       #5 0x5e9aab92dc54 <unknown>\nE       #6 0x5e9aab921209 <unknown>\nE       #7 0x5e9aab94e452 <unknown>\nE       #8 0x5e9aab920b98 <unknown>\nE       #9 0x5e9aab94e61e <unknown>\nE       #10 0x5e9aab96cc29 <unknown>\nE       #11 0x5e9aab94e1f3 <unknown>\nE       #12 0x5e9aab91f28a <unknown>\nE       #13 0x5e9aab91fc5e <unknown>\nE       #14 0x5e9aabbb711b <unknown>\nE       #15 0x5e9aabbbb06b <unknown>\nE       #16 0x5e9aabba3231 <unknown>\nE       #17 0x5e9aabbbbbd2 <unknown>\nE       #18 0x5e9aabb880ef <unknown>\nE       #19 0x5e9aabbe1f48 <unknown>\nE       #20 0x5e9aabbe2120 <unknown>\nE       #21 0x5e9aabbf1f44 <unknown>\nE       #22 0x79b175e94ac3 <unknown>\n\n.venv/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException"}, "attachments": [{"name": "log", "source": "21a8c7b1-977c-4c51-9f0b-d5c518d031fe-attachment.txt", "type": "text/plain"}], "start": 1715250806797, "stop": 1715250820802, "uuid": "0327d2be-dc18-468b-9e75-289f9b43c4e4", "historyId": "93d14e515e58aafdfa427b5dbc4d9acc", "testCaseId": "93d14e515e58aafdfa427b5dbc4d9acc", "fullName": "testcases.test_bulkupload.Test_Bulkupload#test_reasons", "labels": [{"name": "severity", "value": "normal"}, {"name": "parentSuite", "value": "testcases"}, {"name": "suite", "value": "test_bulkupload"}, {"name": "subSuite", "value": "Test_Bulkupload"}, {"name": "host", "value": "vishal-IdeaPad-Gaming-3-15IMH05"}, {"name": "thread", "value": "20676-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.test_bulkupload"}]}