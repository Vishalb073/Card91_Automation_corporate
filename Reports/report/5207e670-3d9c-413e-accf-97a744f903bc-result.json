{"name": "test_corporate", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.JavascriptException: Message: javascript error: {\"status\":32,\"value\":\"An invalid or illegal selector was specified\"}\n  (Session info: chrome=124.0.6367.118)\nStacktrace:\n#0 0x5f09fc065cb3 <unknown>\n#1 0x5f09fbd544a7 <unknown>\n#2 0x5f09fbd59a5c <unknown>\n#3 0x5f09fbd5b7af <unknown>\n#4 0x5f09fbd5b83c <unknown>\n#5 0x5f09fbd9f028 <unknown>\n#6 0x5f09fbd9f3d1 <unknown>\n#7 0x5f09fbde2734 <unknown>\n#8 0x5f09fbdc143d <unknown>\n#9 0x5f09fbddfbe9 <unknown>\n#10 0x5f09fbdc11b3 <unknown>\n#11 0x5f09fbd9224a <unknown>\n#12 0x5f09fbd92c1e <unknown>\n#13 0x5f09fc029fdb <unknown>\n#14 0x5f09fc02df2b <unknown>\n#15 0x5f09fc0160f1 <unknown>\n#16 0x5f09fc02ea92 <unknown>\n#17 0x5f09fbffafaf <unknown>\n#18 0x5f09fc054e08 <unknown>\n#19 0x5f09fc054fe0 <unknown>\n#20 0x5f09fc064e04 <unknown>\n#21 0x7a3d69494ac3 <unknown>", "trace": "self = <testcases.test_corporate.Test_corporate object at 0x7ca2076bf490>\nlogin_setup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"14dbcbf4a2667bcb584b34c8907a9657\")>\n\n    def test_corporate(self, login_setup):\n        self.driver = login_setup\n        self.driver.get(self.baseURL)\n        self.cp = corporatePage(self.driver)\n        self.random_d = randomData()\n        self.gst_no = self.random_d.generate_random_string()\n        self.pan_nu = self.random_d.generate_random_Pan()\n        # self.phone = self.random_d.genrate_random_phone()\n        self.email = self.random_d.random_email()\n    \n    \n        # self.rows = XLUtils.getRowCount(self.path, 'sheet1')\n        #\n        # for r in range(2, self.rows + 1):\n        #     self.company = XLUtils.readData(self.path, 'sheet1', r, 1)\n        #     self.buisness = XLUtils.readData(self.path, 'sheet1', r, 2)\n        #     self.logo = XLUtils.readData(self.path, 'sheet1', r, 3)\n        #     self.sec_Num = XLUtils.readData(self.path, 'sheet1', r, 4)\n        #     self.sec_amt = XLUtils.readData(self.path, 'sheet1', r, 5)\n        #     self.address = XLUtils.readData(self.path, 'sheet1', r, 6)\n        #     self.address1 = XLUtils.readData(self.path, 'sheet1', r, 7)\n        #     self.city = XLUtils.readData(self.path, 'sheet1', r, 8)\n        #     self.state = XLUtils.readData(self.path, 'sheet1', r, 9)\n        #     self.pin = XLUtils.readData(self.path, 'sheet1', r, 10)\n        #     self.adminname = XLUtils.readData(self.path, 'sheet1', r, 11)\n        #\n        #\n    \n        self.cp.corporate_button()\n        self.cp.onboard_button()\n        self.cp.company_name(self.company)\n        self.cp.buisness_Type(self.buisness)\n        self.cp.company_logo(self.logo)\n        self.cp.gst_num(self.gst_no)\n        self.cp.pan_num(self.pan_nu)\n>       self.cp.dropDown()\n\ntestcases/test_corporate.py:70: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npageobjects/corporate.py:90: in dropDown\n    self.driver.find_element(By.CSS_SELECTOR, self.select_security).click()\n.venv/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:741: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n.venv/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7ca2076befe0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"javascript error\",\"message\":\"javascript error: {\\\\\"status\\\\\":32,\\\\\"value\\...\\\\n#19 0x5f09fc054fe0 \\\\u003Cunknown>\\\\n#20 0x5f09fc064e04 \\\\u003Cunknown>\\\\n#21 0x7a3d69494ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.JavascriptException: Message: javascript error: {\"status\":32,\"value\":\"An invalid or illegal selector was specified\"}\nE         (Session info: chrome=124.0.6367.118)\nE       Stacktrace:\nE       #0 0x5f09fc065cb3 <unknown>\nE       #1 0x5f09fbd544a7 <unknown>\nE       #2 0x5f09fbd59a5c <unknown>\nE       #3 0x5f09fbd5b7af <unknown>\nE       #4 0x5f09fbd5b83c <unknown>\nE       #5 0x5f09fbd9f028 <unknown>\nE       #6 0x5f09fbd9f3d1 <unknown>\nE       #7 0x5f09fbde2734 <unknown>\nE       #8 0x5f09fbdc143d <unknown>\nE       #9 0x5f09fbddfbe9 <unknown>\nE       #10 0x5f09fbdc11b3 <unknown>\nE       #11 0x5f09fbd9224a <unknown>\nE       #12 0x5f09fbd92c1e <unknown>\nE       #13 0x5f09fc029fdb <unknown>\nE       #14 0x5f09fc02df2b <unknown>\nE       #15 0x5f09fc0160f1 <unknown>\nE       #16 0x5f09fc02ea92 <unknown>\nE       #17 0x5f09fbffafaf <unknown>\nE       #18 0x5f09fc054e08 <unknown>\nE       #19 0x5f09fc054fe0 <unknown>\nE       #20 0x5f09fc064e04 <unknown>\nE       #21 0x7a3d69494ac3 <unknown>\n\n.venv/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:229: JavascriptException"}, "start": 1714971521360, "stop": 1714971530764, "uuid": "15518e58-d5d2-4a35-9899-401dfd5bc347", "historyId": "e5675735761af8058bfb6b44a130df1d", "testCaseId": "e5675735761af8058bfb6b44a130df1d", "fullName": "testcases.test_corporate.Test_corporate#test_corporate", "labels": [{"name": "severity", "value": "normal"}, {"name": "parentSuite", "value": "testcases"}, {"name": "suite", "value": "test_corporate"}, {"name": "subSuite", "value": "Test_corporate"}, {"name": "host", "value": "vishal-IdeaPad-Gaming-3-15IMH05"}, {"name": "thread", "value": "17018-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.test_corporate"}]}