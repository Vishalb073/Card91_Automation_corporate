{"name": "test_corporate", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x598a78dcccb3 <unknown>\n#1 0x598a78abb4a7 <unknown>\n#2 0x598a78b0631d <unknown>\n#3 0x598a78b063d1 <unknown>\n#4 0x598a78b49734 <unknown>\n#5 0x598a78b2843d <unknown>\n#6 0x598a78b46be9 <unknown>\n#7 0x598a78b281b3 <unknown>\n#8 0x598a78af924a <unknown>\n#9 0x598a78af9c1e <unknown>\n#10 0x598a78d90fdb <unknown>\n#11 0x598a78d94f2b <unknown>\n#12 0x598a78d7d0f1 <unknown>\n#13 0x598a78d95a92 <unknown>\n#14 0x598a78d61faf <unknown>\n#15 0x598a78dbbe08 <unknown>\n#16 0x598a78dbbfe0 <unknown>\n#17 0x598a78dcbe04 <unknown>\n#18 0x74aface94ac3 <unknown>", "trace": "self = <testcases.test_corporate.Test_corporate object at 0x7db9602a9390>, login_setup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"9092cdc368905348e5b379295be96454\")>\n\n    def test_corporate(self, login_setup):\n        self.driver = login_setup\n        self.driver.get(self.baseURL)\n        self.cp = corporatePage(self.driver)\n        self.random_d = randomData()\n        self.gst_no = self.random_d.generate_random_string()\n        self.pan_nu = self.random_d.generate_random_Pan()\n        # self.phone = self.random_d.genrate_random_phone()\n        self.email = self.random_d.random_email()\n    \n    \n        # self.rows = XLUtils.getRowCount(self.path, 'sheet1')\n        #\n        # for r in range(2, self.rows + 1):\n        #     self.company = XLUtils.readData(self.path, 'sheet1', r, 1)\n        #     self.buisness = XLUtils.readData(self.path, 'sheet1', r, 2)\n        #     self.logo = XLUtils.readData(self.path, 'sheet1', r, 3)\n        #     self.sec_Num = XLUtils.readData(self.path, 'sheet1', r, 4)\n        #     self.sec_amt = XLUtils.readData(self.path, 'sheet1', r, 5)\n        #     self.address = XLUtils.readData(self.path, 'sheet1', r, 6)\n        #     self.address1 = XLUtils.readData(self.path, 'sheet1', r, 7)\n        #     self.city = XLUtils.readData(self.path, 'sheet1', r, 8)\n        #     self.state = XLUtils.readData(self.path, 'sheet1', r, 9)\n        #     self.pin = XLUtils.readData(self.path, 'sheet1', r, 10)\n        #     self.adminname = XLUtils.readData(self.path, 'sheet1', r, 11)\n        #\n        #\n    \n        self.cp.corporate_button()\n        self.cp.onboard_button()\n        self.cp.company_name(self.company)\n        self.cp.buisness_Type(self.buisness)\n        self.cp.company_logo(self.logo)\n        self.cp.gst_num(self.gst_no)\n        self.cp.pan_num(self.pan_nu)\n        self.cp.dropDown()\n        self.cp.security_num(self.sec_num)\n        self.cp.security_amount(self.sec_amt)\n        self.cp.address(self.address)\n        self.cp.address_1(self.address1)\n        self.cp.addr_city(self.city)\n        self.cp.addr_state(self.state)\n        self.cp.addr_pin(self.pin)\n        self.cp.admin_name(self.admin)\n        self.cp.admin_mobile(self.phone)\n        self.cp.admin_email(self.email)\n>       self.cp.submit_button()\n\ntestcases/test_corporate.py:81: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageobjects/corporate.py:193: in submit_button\n    button = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, self.submit_css)))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"9092cdc368905348e5b379295be96454\")>, method = <function element_to_be_clickable.<locals>._predicate at 0x7db9602793f0>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       #0 0x598a78dcccb3 <unknown>\nE       #1 0x598a78abb4a7 <unknown>\nE       #2 0x598a78b0631d <unknown>\nE       #3 0x598a78b063d1 <unknown>\nE       #4 0x598a78b49734 <unknown>\nE       #5 0x598a78b2843d <unknown>\nE       #6 0x598a78b46be9 <unknown>\nE       #7 0x598a78b281b3 <unknown>\nE       #8 0x598a78af924a <unknown>\nE       #9 0x598a78af9c1e <unknown>\nE       #10 0x598a78d90fdb <unknown>\nE       #11 0x598a78d94f2b <unknown>\nE       #12 0x598a78d7d0f1 <unknown>\nE       #13 0x598a78d95a92 <unknown>\nE       #14 0x598a78d61faf <unknown>\nE       #15 0x598a78dbbe08 <unknown>\nE       #16 0x598a78dbbfe0 <unknown>\nE       #17 0x598a78dcbe04 <unknown>\nE       #18 0x74aface94ac3 <unknown>\n\n.venv/lib/python3.10/site-packages/selenium/webdriver/support/wait.py:105: TimeoutException"}, "attachments": [{"name": "testCorporate", "source": "b0fd97b4-e091-41d2-9fda-94f07c88ef29-attachment.png", "type": "image/png"}], "start": 1715072457074, "stop": 1715072470823, "uuid": "0a59fb8e-7a68-476e-9dda-d626e8801797", "historyId": "e5675735761af8058bfb6b44a130df1d", "testCaseId": "e5675735761af8058bfb6b44a130df1d", "fullName": "testcases.test_corporate.Test_corporate#test_corporate", "labels": [{"name": "severity", "value": "normal"}, {"name": "parentSuite", "value": "testcases"}, {"name": "suite", "value": "test_corporate"}, {"name": "subSuite", "value": "Test_corporate"}, {"name": "host", "value": "vishal-IdeaPad-Gaming-3-15IMH05"}, {"name": "thread", "value": "23101-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.test_corporate"}]}