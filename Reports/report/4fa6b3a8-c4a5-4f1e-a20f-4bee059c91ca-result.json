{"name": "test_bulk", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: File not found : /home/vishal/Downloads/Corporate_Limits_1 .csv\n  (Session info: chrome=124.0.6367.118)\nStacktrace:\n#0 0x654832764cb3 <unknown>\n#1 0x6548324534a7 <unknown>\n#2 0x654832497038 <unknown>\n#3 0x6548324c0412 <unknown>\n#4 0x654832492b58 <unknown>\n#5 0x6548324c05de <unknown>\n#6 0x6548324debe9 <unknown>\n#7 0x6548324c01b3 <unknown>\n#8 0x65483249124a <unknown>\n#9 0x654832491c1e <unknown>\n#10 0x654832728fdb <unknown>\n#11 0x65483272cf2b <unknown>\n#12 0x6548327150f1 <unknown>\n#13 0x65483272da92 <unknown>\n#14 0x6548326f9faf <unknown>\n#15 0x654832753e08 <unknown>\n#16 0x654832753fe0 <unknown>\n#17 0x654832763e04 <unknown>\n#18 0x75ba88c94ac3 <unknown>", "trace": "self = <testcases.test_bulkupload.TestBulkUpload object at 0x74cd0d369de0>, login_setup1 = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"8c5ab62655119116723ede0834493c8e\")>\n\n    @pytest.mark.usefixtures(\"login_setup1\")\n    def test_bulk(self, login_setup1):\n        file = \"/home/vishal/Downloads/Corporate_Limits_updated2.csv\"\n        file1 = \"/home/vishal/Downloads/Corporate_Limits_1 .csv\"\n        self.driver = login_setup1\n        #self.driver.get(self.baseURL)\n        self.bu = bulk_upload(self.driver)\n        self.bu.bulk_btn()\n        self.bu.file_download()\n        self.bu.upload_btn()\n        self.bu.send_key(file)\n        self.bu.customers()\n>       self.bu.customers_file(file1)\n\ntestcases/test_bulkupload.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageobjects/bulkupload.py:68: in customers_file\n    self.driver.find_element(By.CSS_SELECTOR, self.send_file).send_keys(file1)\n.venv/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:231: in send_keys\n    self._execute(\n.venv/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n.venv/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x74cd0d36a170>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"invalid argument: File not found : /home/vis...\\\\n#16 0x654832753fe0 \\\\u003Cunknown>\\\\n#17 0x654832763e04 \\\\u003Cunknown>\\\\n#18 0x75ba88c94ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: File not found : /home/vishal/Downloads/Corporate_Limits_1 .csv\nE         (Session info: chrome=124.0.6367.118)\nE       Stacktrace:\nE       #0 0x654832764cb3 <unknown>\nE       #1 0x6548324534a7 <unknown>\nE       #2 0x654832497038 <unknown>\nE       #3 0x6548324c0412 <unknown>\nE       #4 0x654832492b58 <unknown>\nE       #5 0x6548324c05de <unknown>\nE       #6 0x6548324debe9 <unknown>\nE       #7 0x6548324c01b3 <unknown>\nE       #8 0x65483249124a <unknown>\nE       #9 0x654832491c1e <unknown>\nE       #10 0x654832728fdb <unknown>\nE       #11 0x65483272cf2b <unknown>\nE       #12 0x6548327150f1 <unknown>\nE       #13 0x65483272da92 <unknown>\nE       #14 0x6548326f9faf <unknown>\nE       #15 0x654832753e08 <unknown>\nE       #16 0x654832753fe0 <unknown>\nE       #17 0x654832763e04 <unknown>\nE       #18 0x75ba88c94ac3 <unknown>\n\n.venv/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:229: InvalidArgumentException"}, "attachments": [{"name": "bulkupload", "source": "030a9044-fcf0-4376-90dd-daf2ff1d3ff5-attachment.png", "type": "image/png"}], "start": 1715064022571, "stop": 1715064037118, "uuid": "a584170b-0088-4e79-909f-3416e8025b2c", "historyId": "6e42cf6a3cc18df9de0d3831560e70df", "testCaseId": "6e42cf6a3cc18df9de0d3831560e70df", "fullName": "testcases.test_bulkupload.TestBulkUpload#test_bulk", "labels": [{"name": "severity", "value": "normal"}, {"name": "tag", "value": "@pytest.mark.usefixtures('login_setup1')"}, {"name": "parentSuite", "value": "testcases"}, {"name": "suite", "value": "test_bulkupload"}, {"name": "subSuite", "value": "TestBulkUpload"}, {"name": "host", "value": "vishal-IdeaPad-Gaming-3-15IMH05"}, {"name": "thread", "value": "12321-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.test_bulkupload"}]}